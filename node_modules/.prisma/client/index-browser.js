
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.11.1
 * Query Engine version: 1a2506facaf1a4727b7c26850735e88ec779dee9
 */
Prisma.prismaVersion = {
  client: "3.11.1",
  engine: "1a2506facaf1a4727b7c26850735e88ec779dee9"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  password: 'password',
  email: 'email',
  phoneNo: 'phoneNo',
  address: 'address',
  date: 'date',
  isVolunteer: 'isVolunteer'
});

exports.Prisma.OrganizationScalarFieldEnum = makeEnum({
  org_id: 'org_id',
  orgName: 'orgName',
  contact: 'contact',
  ew: 'ew',
  address: 'address',
  added_by: 'added_by'
});

exports.Prisma.PatientAdditionScalarFieldEnum = makeEnum({
  paitient_id: 'paitient_id',
  patient_name: 'patient_name',
  hospital: 'hospital',
  location: 'location',
  description: 'description',
  time: 'time',
  added_by: 'added_by'
});

exports.Prisma.DonationScalarFieldEnum = makeEnum({
  donationId: 'donationId',
  type: 'type',
  amount: 'amount',
  status: 'status',
  date: 'date',
  expiration: 'expiration',
  added_by: 'added_by'
});

exports.Prisma.DonationOrgScalarFieldEnum = makeEnum({
  donationId: 'donationId',
  type: 'type',
  amount: 'amount',
  status: 'status',
  orgId: 'orgId',
  date: 'date',
  donateBy: 'donateBy'
});

exports.Prisma.AdminScalarFieldEnum = makeEnum({
  id: 'id',
  userName: 'userName',
  name: 'name',
  role: 'role',
  password: 'password'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});


exports.Prisma.ModelName = makeEnum({
  User: 'User',
  organization: 'organization',
  patientAddition: 'patientAddition',
  donation: 'donation',
  donationOrg: 'donationOrg',
  admin: 'admin'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
