
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: number
  firstName: string
  lastName: string
  password: string
  email: string
  phoneNo: string
  address: string
  date: Date
  isVolunteer: boolean
}

/**
 * Model organization
 * 
 */
export type organization = {
  org_id: number
  orgName: string
  contact: string
  ew: string
  address: string
  added_by: string
}

/**
 * Model patientAddition
 * 
 */
export type patientAddition = {
  paitient_id: number
  patient_name: string
  hospital: string
  location: string
  description: string
  time: Date
  added_by: string
}

/**
 * Model donation
 * 
 */
export type donation = {
  donationId: number
  type: string
  amount: string
  status: boolean
  date: Date
  expiration: string
  added_by: string
}

/**
 * Model donationOrg
 * 
 */
export type donationOrg = {
  donationId: number
  type: string
  amount: number
  status: boolean
  orgId: number
  date: Date
  donateBy: string
}

/**
 * Model admin
 * 
 */
export type admin = {
  id: number
  userName: string
  name: string
  role: string
  password: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.organization`: Exposes CRUD operations for the **organization** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Organizations
    * const organizations = await prisma.organization.findMany()
    * ```
    */
  get organization(): Prisma.organizationDelegate<GlobalReject>;

  /**
   * `prisma.patientAddition`: Exposes CRUD operations for the **patientAddition** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PatientAdditions
    * const patientAdditions = await prisma.patientAddition.findMany()
    * ```
    */
  get patientAddition(): Prisma.patientAdditionDelegate<GlobalReject>;

  /**
   * `prisma.donation`: Exposes CRUD operations for the **donation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Donations
    * const donations = await prisma.donation.findMany()
    * ```
    */
  get donation(): Prisma.donationDelegate<GlobalReject>;

  /**
   * `prisma.donationOrg`: Exposes CRUD operations for the **donationOrg** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DonationOrgs
    * const donationOrgs = await prisma.donationOrg.findMany()
    * ```
    */
  get donationOrg(): Prisma.donationOrgDelegate<GlobalReject>;

  /**
   * `prisma.admin`: Exposes CRUD operations for the **admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.adminDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.11.1
   * Query Engine version: 1a2506facaf1a4727b7c26850735e88ec779dee9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    organization: 'organization',
    patientAddition: 'patientAddition',
    donation: 'donation',
    donationOrg: 'donationOrg',
    admin: 'admin'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    password: string | null
    email: string | null
    phoneNo: string | null
    address: string | null
    date: Date | null
    isVolunteer: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    password: string | null
    email: string | null
    phoneNo: string | null
    address: string | null
    date: Date | null
    isVolunteer: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    password: number
    email: number
    phoneNo: number
    address: number
    date: number
    isVolunteer: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    password?: true
    email?: true
    phoneNo?: true
    address?: true
    date?: true
    isVolunteer?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    password?: true
    email?: true
    phoneNo?: true
    address?: true
    date?: true
    isVolunteer?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    password?: true
    email?: true
    phoneNo?: true
    address?: true
    date?: true
    isVolunteer?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    firstName: string
    lastName: string
    password: string
    email: string
    phoneNo: string
    address: string
    date: Date
    isVolunteer: boolean
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    password?: boolean
    email?: boolean
    phoneNo?: boolean
    address?: boolean
    date?: boolean
    isVolunteer?: boolean
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
  }



  /**
   * Model organization
   */


  export type AggregateOrganization = {
    _count: OrganizationCountAggregateOutputType | null
    _avg: OrganizationAvgAggregateOutputType | null
    _sum: OrganizationSumAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  export type OrganizationAvgAggregateOutputType = {
    org_id: number | null
  }

  export type OrganizationSumAggregateOutputType = {
    org_id: number | null
  }

  export type OrganizationMinAggregateOutputType = {
    org_id: number | null
    orgName: string | null
    contact: string | null
    ew: string | null
    address: string | null
    added_by: string | null
  }

  export type OrganizationMaxAggregateOutputType = {
    org_id: number | null
    orgName: string | null
    contact: string | null
    ew: string | null
    address: string | null
    added_by: string | null
  }

  export type OrganizationCountAggregateOutputType = {
    org_id: number
    orgName: number
    contact: number
    ew: number
    address: number
    added_by: number
    _all: number
  }


  export type OrganizationAvgAggregateInputType = {
    org_id?: true
  }

  export type OrganizationSumAggregateInputType = {
    org_id?: true
  }

  export type OrganizationMinAggregateInputType = {
    org_id?: true
    orgName?: true
    contact?: true
    ew?: true
    address?: true
    added_by?: true
  }

  export type OrganizationMaxAggregateInputType = {
    org_id?: true
    orgName?: true
    contact?: true
    ew?: true
    address?: true
    added_by?: true
  }

  export type OrganizationCountAggregateInputType = {
    org_id?: true
    orgName?: true
    contact?: true
    ew?: true
    address?: true
    added_by?: true
    _all?: true
  }

  export type OrganizationAggregateArgs = {
    /**
     * Filter which organization to aggregate.
     * 
    **/
    where?: organizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of organizations to fetch.
     * 
    **/
    orderBy?: Enumerable<organizationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: organizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` organizations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` organizations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned organizations
    **/
    _count?: true | OrganizationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrganizationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrganizationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrganizationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrganizationMaxAggregateInputType
  }

  export type GetOrganizationAggregateType<T extends OrganizationAggregateArgs> = {
        [P in keyof T & keyof AggregateOrganization]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrganization[P]>
      : GetScalarType<T[P], AggregateOrganization[P]>
  }




  export type OrganizationGroupByArgs = {
    where?: organizationWhereInput
    orderBy?: Enumerable<organizationOrderByWithAggregationInput>
    by: Array<OrganizationScalarFieldEnum>
    having?: organizationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrganizationCountAggregateInputType | true
    _avg?: OrganizationAvgAggregateInputType
    _sum?: OrganizationSumAggregateInputType
    _min?: OrganizationMinAggregateInputType
    _max?: OrganizationMaxAggregateInputType
  }


  export type OrganizationGroupByOutputType = {
    org_id: number
    orgName: string
    contact: string
    ew: string
    address: string
    added_by: string
    _count: OrganizationCountAggregateOutputType | null
    _avg: OrganizationAvgAggregateOutputType | null
    _sum: OrganizationSumAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  type GetOrganizationGroupByPayload<T extends OrganizationGroupByArgs> = PrismaPromise<
    Array<
      PickArray<OrganizationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrganizationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
            : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
        }
      >
    >


  export type organizationSelect = {
    org_id?: boolean
    orgName?: boolean
    contact?: boolean
    ew?: boolean
    address?: boolean
    added_by?: boolean
  }

  export type organizationGetPayload<
    S extends boolean | null | undefined | organizationArgs,
    U = keyof S
      > = S extends true
        ? organization
    : S extends undefined
    ? never
    : S extends organizationArgs | organizationFindManyArgs
    ?'include' extends U
    ? organization 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof organization ? organization[P] : never
  } 
    : organization
  : organization


  type organizationCountArgs = Merge<
    Omit<organizationFindManyArgs, 'select' | 'include'> & {
      select?: OrganizationCountAggregateInputType | true
    }
  >

  export interface organizationDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Organization that matches the filter.
     * @param {organizationFindUniqueArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends organizationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, organizationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'organization'> extends True ? CheckSelect<T, Prisma__organizationClient<organization>, Prisma__organizationClient<organizationGetPayload<T>>> : CheckSelect<T, Prisma__organizationClient<organization | null >, Prisma__organizationClient<organizationGetPayload<T> | null >>

    /**
     * Find the first Organization that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {organizationFindFirstArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends organizationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, organizationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'organization'> extends True ? CheckSelect<T, Prisma__organizationClient<organization>, Prisma__organizationClient<organizationGetPayload<T>>> : CheckSelect<T, Prisma__organizationClient<organization | null >, Prisma__organizationClient<organizationGetPayload<T> | null >>

    /**
     * Find zero or more Organizations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {organizationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Organizations
     * const organizations = await prisma.organization.findMany()
     * 
     * // Get first 10 Organizations
     * const organizations = await prisma.organization.findMany({ take: 10 })
     * 
     * // Only select the `org_id`
     * const organizationWithOrg_idOnly = await prisma.organization.findMany({ select: { org_id: true } })
     * 
    **/
    findMany<T extends organizationFindManyArgs>(
      args?: SelectSubset<T, organizationFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<organization>>, PrismaPromise<Array<organizationGetPayload<T>>>>

    /**
     * Create a Organization.
     * @param {organizationCreateArgs} args - Arguments to create a Organization.
     * @example
     * // Create one Organization
     * const Organization = await prisma.organization.create({
     *   data: {
     *     // ... data to create a Organization
     *   }
     * })
     * 
    **/
    create<T extends organizationCreateArgs>(
      args: SelectSubset<T, organizationCreateArgs>
    ): CheckSelect<T, Prisma__organizationClient<organization>, Prisma__organizationClient<organizationGetPayload<T>>>

    /**
     * Create many Organizations.
     *     @param {organizationCreateManyArgs} args - Arguments to create many Organizations.
     *     @example
     *     // Create many Organizations
     *     const organization = await prisma.organization.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends organizationCreateManyArgs>(
      args?: SelectSubset<T, organizationCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Organization.
     * @param {organizationDeleteArgs} args - Arguments to delete one Organization.
     * @example
     * // Delete one Organization
     * const Organization = await prisma.organization.delete({
     *   where: {
     *     // ... filter to delete one Organization
     *   }
     * })
     * 
    **/
    delete<T extends organizationDeleteArgs>(
      args: SelectSubset<T, organizationDeleteArgs>
    ): CheckSelect<T, Prisma__organizationClient<organization>, Prisma__organizationClient<organizationGetPayload<T>>>

    /**
     * Update one Organization.
     * @param {organizationUpdateArgs} args - Arguments to update one Organization.
     * @example
     * // Update one Organization
     * const organization = await prisma.organization.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends organizationUpdateArgs>(
      args: SelectSubset<T, organizationUpdateArgs>
    ): CheckSelect<T, Prisma__organizationClient<organization>, Prisma__organizationClient<organizationGetPayload<T>>>

    /**
     * Delete zero or more Organizations.
     * @param {organizationDeleteManyArgs} args - Arguments to filter Organizations to delete.
     * @example
     * // Delete a few Organizations
     * const { count } = await prisma.organization.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends organizationDeleteManyArgs>(
      args?: SelectSubset<T, organizationDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {organizationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Organizations
     * const organization = await prisma.organization.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends organizationUpdateManyArgs>(
      args: SelectSubset<T, organizationUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Organization.
     * @param {organizationUpsertArgs} args - Arguments to update or create a Organization.
     * @example
     * // Update or create a Organization
     * const organization = await prisma.organization.upsert({
     *   create: {
     *     // ... data to create a Organization
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Organization we want to update
     *   }
     * })
    **/
    upsert<T extends organizationUpsertArgs>(
      args: SelectSubset<T, organizationUpsertArgs>
    ): CheckSelect<T, Prisma__organizationClient<organization>, Prisma__organizationClient<organizationGetPayload<T>>>

    /**
     * Count the number of Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {organizationCountArgs} args - Arguments to filter Organizations to count.
     * @example
     * // Count the number of Organizations
     * const count = await prisma.organization.count({
     *   where: {
     *     // ... the filter for the Organizations we want to count
     *   }
     * })
    **/
    count<T extends organizationCountArgs>(
      args?: Subset<T, organizationCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrganizationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrganizationAggregateArgs>(args: Subset<T, OrganizationAggregateArgs>): PrismaPromise<GetOrganizationAggregateType<T>>

    /**
     * Group by Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrganizationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrganizationGroupByArgs['orderBy'] }
        : { orderBy?: OrganizationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrganizationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrganizationGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for organization.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__organizationClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * organization findUnique
   */
  export type organizationFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the organization
     * 
    **/
    select?: organizationSelect | null
    /**
     * Throw an Error if a organization can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which organization to fetch.
     * 
    **/
    where: organizationWhereUniqueInput
  }


  /**
   * organization findFirst
   */
  export type organizationFindFirstArgs = {
    /**
     * Select specific fields to fetch from the organization
     * 
    **/
    select?: organizationSelect | null
    /**
     * Throw an Error if a organization can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which organization to fetch.
     * 
    **/
    where?: organizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of organizations to fetch.
     * 
    **/
    orderBy?: Enumerable<organizationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for organizations.
     * 
    **/
    cursor?: organizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` organizations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` organizations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of organizations.
     * 
    **/
    distinct?: Enumerable<OrganizationScalarFieldEnum>
  }


  /**
   * organization findMany
   */
  export type organizationFindManyArgs = {
    /**
     * Select specific fields to fetch from the organization
     * 
    **/
    select?: organizationSelect | null
    /**
     * Filter, which organizations to fetch.
     * 
    **/
    where?: organizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of organizations to fetch.
     * 
    **/
    orderBy?: Enumerable<organizationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing organizations.
     * 
    **/
    cursor?: organizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` organizations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` organizations.
     * 
    **/
    skip?: number
    distinct?: Enumerable<OrganizationScalarFieldEnum>
  }


  /**
   * organization create
   */
  export type organizationCreateArgs = {
    /**
     * Select specific fields to fetch from the organization
     * 
    **/
    select?: organizationSelect | null
    /**
     * The data needed to create a organization.
     * 
    **/
    data: XOR<organizationCreateInput, organizationUncheckedCreateInput>
  }


  /**
   * organization createMany
   */
  export type organizationCreateManyArgs = {
    /**
     * The data used to create many organizations.
     * 
    **/
    data: Enumerable<organizationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * organization update
   */
  export type organizationUpdateArgs = {
    /**
     * Select specific fields to fetch from the organization
     * 
    **/
    select?: organizationSelect | null
    /**
     * The data needed to update a organization.
     * 
    **/
    data: XOR<organizationUpdateInput, organizationUncheckedUpdateInput>
    /**
     * Choose, which organization to update.
     * 
    **/
    where: organizationWhereUniqueInput
  }


  /**
   * organization updateMany
   */
  export type organizationUpdateManyArgs = {
    /**
     * The data used to update organizations.
     * 
    **/
    data: XOR<organizationUpdateManyMutationInput, organizationUncheckedUpdateManyInput>
    /**
     * Filter which organizations to update
     * 
    **/
    where?: organizationWhereInput
  }


  /**
   * organization upsert
   */
  export type organizationUpsertArgs = {
    /**
     * Select specific fields to fetch from the organization
     * 
    **/
    select?: organizationSelect | null
    /**
     * The filter to search for the organization to update in case it exists.
     * 
    **/
    where: organizationWhereUniqueInput
    /**
     * In case the organization found by the `where` argument doesn't exist, create a new organization with this data.
     * 
    **/
    create: XOR<organizationCreateInput, organizationUncheckedCreateInput>
    /**
     * In case the organization was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<organizationUpdateInput, organizationUncheckedUpdateInput>
  }


  /**
   * organization delete
   */
  export type organizationDeleteArgs = {
    /**
     * Select specific fields to fetch from the organization
     * 
    **/
    select?: organizationSelect | null
    /**
     * Filter which organization to delete.
     * 
    **/
    where: organizationWhereUniqueInput
  }


  /**
   * organization deleteMany
   */
  export type organizationDeleteManyArgs = {
    /**
     * Filter which organizations to delete
     * 
    **/
    where?: organizationWhereInput
  }


  /**
   * organization without action
   */
  export type organizationArgs = {
    /**
     * Select specific fields to fetch from the organization
     * 
    **/
    select?: organizationSelect | null
  }



  /**
   * Model patientAddition
   */


  export type AggregatePatientAddition = {
    _count: PatientAdditionCountAggregateOutputType | null
    _avg: PatientAdditionAvgAggregateOutputType | null
    _sum: PatientAdditionSumAggregateOutputType | null
    _min: PatientAdditionMinAggregateOutputType | null
    _max: PatientAdditionMaxAggregateOutputType | null
  }

  export type PatientAdditionAvgAggregateOutputType = {
    paitient_id: number | null
  }

  export type PatientAdditionSumAggregateOutputType = {
    paitient_id: number | null
  }

  export type PatientAdditionMinAggregateOutputType = {
    paitient_id: number | null
    patient_name: string | null
    hospital: string | null
    location: string | null
    description: string | null
    time: Date | null
    added_by: string | null
  }

  export type PatientAdditionMaxAggregateOutputType = {
    paitient_id: number | null
    patient_name: string | null
    hospital: string | null
    location: string | null
    description: string | null
    time: Date | null
    added_by: string | null
  }

  export type PatientAdditionCountAggregateOutputType = {
    paitient_id: number
    patient_name: number
    hospital: number
    location: number
    description: number
    time: number
    added_by: number
    _all: number
  }


  export type PatientAdditionAvgAggregateInputType = {
    paitient_id?: true
  }

  export type PatientAdditionSumAggregateInputType = {
    paitient_id?: true
  }

  export type PatientAdditionMinAggregateInputType = {
    paitient_id?: true
    patient_name?: true
    hospital?: true
    location?: true
    description?: true
    time?: true
    added_by?: true
  }

  export type PatientAdditionMaxAggregateInputType = {
    paitient_id?: true
    patient_name?: true
    hospital?: true
    location?: true
    description?: true
    time?: true
    added_by?: true
  }

  export type PatientAdditionCountAggregateInputType = {
    paitient_id?: true
    patient_name?: true
    hospital?: true
    location?: true
    description?: true
    time?: true
    added_by?: true
    _all?: true
  }

  export type PatientAdditionAggregateArgs = {
    /**
     * Filter which patientAddition to aggregate.
     * 
    **/
    where?: patientAdditionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of patientAdditions to fetch.
     * 
    **/
    orderBy?: Enumerable<patientAdditionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: patientAdditionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` patientAdditions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` patientAdditions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned patientAdditions
    **/
    _count?: true | PatientAdditionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatientAdditionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatientAdditionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientAdditionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientAdditionMaxAggregateInputType
  }

  export type GetPatientAdditionAggregateType<T extends PatientAdditionAggregateArgs> = {
        [P in keyof T & keyof AggregatePatientAddition]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatientAddition[P]>
      : GetScalarType<T[P], AggregatePatientAddition[P]>
  }




  export type PatientAdditionGroupByArgs = {
    where?: patientAdditionWhereInput
    orderBy?: Enumerable<patientAdditionOrderByWithAggregationInput>
    by: Array<PatientAdditionScalarFieldEnum>
    having?: patientAdditionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientAdditionCountAggregateInputType | true
    _avg?: PatientAdditionAvgAggregateInputType
    _sum?: PatientAdditionSumAggregateInputType
    _min?: PatientAdditionMinAggregateInputType
    _max?: PatientAdditionMaxAggregateInputType
  }


  export type PatientAdditionGroupByOutputType = {
    paitient_id: number
    patient_name: string
    hospital: string
    location: string
    description: string
    time: Date
    added_by: string
    _count: PatientAdditionCountAggregateOutputType | null
    _avg: PatientAdditionAvgAggregateOutputType | null
    _sum: PatientAdditionSumAggregateOutputType | null
    _min: PatientAdditionMinAggregateOutputType | null
    _max: PatientAdditionMaxAggregateOutputType | null
  }

  type GetPatientAdditionGroupByPayload<T extends PatientAdditionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PatientAdditionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientAdditionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientAdditionGroupByOutputType[P]>
            : GetScalarType<T[P], PatientAdditionGroupByOutputType[P]>
        }
      >
    >


  export type patientAdditionSelect = {
    paitient_id?: boolean
    patient_name?: boolean
    hospital?: boolean
    location?: boolean
    description?: boolean
    time?: boolean
    added_by?: boolean
  }

  export type patientAdditionGetPayload<
    S extends boolean | null | undefined | patientAdditionArgs,
    U = keyof S
      > = S extends true
        ? patientAddition
    : S extends undefined
    ? never
    : S extends patientAdditionArgs | patientAdditionFindManyArgs
    ?'include' extends U
    ? patientAddition 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof patientAddition ? patientAddition[P] : never
  } 
    : patientAddition
  : patientAddition


  type patientAdditionCountArgs = Merge<
    Omit<patientAdditionFindManyArgs, 'select' | 'include'> & {
      select?: PatientAdditionCountAggregateInputType | true
    }
  >

  export interface patientAdditionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one PatientAddition that matches the filter.
     * @param {patientAdditionFindUniqueArgs} args - Arguments to find a PatientAddition
     * @example
     * // Get one PatientAddition
     * const patientAddition = await prisma.patientAddition.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends patientAdditionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, patientAdditionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'patientAddition'> extends True ? CheckSelect<T, Prisma__patientAdditionClient<patientAddition>, Prisma__patientAdditionClient<patientAdditionGetPayload<T>>> : CheckSelect<T, Prisma__patientAdditionClient<patientAddition | null >, Prisma__patientAdditionClient<patientAdditionGetPayload<T> | null >>

    /**
     * Find the first PatientAddition that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patientAdditionFindFirstArgs} args - Arguments to find a PatientAddition
     * @example
     * // Get one PatientAddition
     * const patientAddition = await prisma.patientAddition.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends patientAdditionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, patientAdditionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'patientAddition'> extends True ? CheckSelect<T, Prisma__patientAdditionClient<patientAddition>, Prisma__patientAdditionClient<patientAdditionGetPayload<T>>> : CheckSelect<T, Prisma__patientAdditionClient<patientAddition | null >, Prisma__patientAdditionClient<patientAdditionGetPayload<T> | null >>

    /**
     * Find zero or more PatientAdditions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patientAdditionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PatientAdditions
     * const patientAdditions = await prisma.patientAddition.findMany()
     * 
     * // Get first 10 PatientAdditions
     * const patientAdditions = await prisma.patientAddition.findMany({ take: 10 })
     * 
     * // Only select the `paitient_id`
     * const patientAdditionWithPaitient_idOnly = await prisma.patientAddition.findMany({ select: { paitient_id: true } })
     * 
    **/
    findMany<T extends patientAdditionFindManyArgs>(
      args?: SelectSubset<T, patientAdditionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<patientAddition>>, PrismaPromise<Array<patientAdditionGetPayload<T>>>>

    /**
     * Create a PatientAddition.
     * @param {patientAdditionCreateArgs} args - Arguments to create a PatientAddition.
     * @example
     * // Create one PatientAddition
     * const PatientAddition = await prisma.patientAddition.create({
     *   data: {
     *     // ... data to create a PatientAddition
     *   }
     * })
     * 
    **/
    create<T extends patientAdditionCreateArgs>(
      args: SelectSubset<T, patientAdditionCreateArgs>
    ): CheckSelect<T, Prisma__patientAdditionClient<patientAddition>, Prisma__patientAdditionClient<patientAdditionGetPayload<T>>>

    /**
     * Create many PatientAdditions.
     *     @param {patientAdditionCreateManyArgs} args - Arguments to create many PatientAdditions.
     *     @example
     *     // Create many PatientAdditions
     *     const patientAddition = await prisma.patientAddition.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends patientAdditionCreateManyArgs>(
      args?: SelectSubset<T, patientAdditionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a PatientAddition.
     * @param {patientAdditionDeleteArgs} args - Arguments to delete one PatientAddition.
     * @example
     * // Delete one PatientAddition
     * const PatientAddition = await prisma.patientAddition.delete({
     *   where: {
     *     // ... filter to delete one PatientAddition
     *   }
     * })
     * 
    **/
    delete<T extends patientAdditionDeleteArgs>(
      args: SelectSubset<T, patientAdditionDeleteArgs>
    ): CheckSelect<T, Prisma__patientAdditionClient<patientAddition>, Prisma__patientAdditionClient<patientAdditionGetPayload<T>>>

    /**
     * Update one PatientAddition.
     * @param {patientAdditionUpdateArgs} args - Arguments to update one PatientAddition.
     * @example
     * // Update one PatientAddition
     * const patientAddition = await prisma.patientAddition.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends patientAdditionUpdateArgs>(
      args: SelectSubset<T, patientAdditionUpdateArgs>
    ): CheckSelect<T, Prisma__patientAdditionClient<patientAddition>, Prisma__patientAdditionClient<patientAdditionGetPayload<T>>>

    /**
     * Delete zero or more PatientAdditions.
     * @param {patientAdditionDeleteManyArgs} args - Arguments to filter PatientAdditions to delete.
     * @example
     * // Delete a few PatientAdditions
     * const { count } = await prisma.patientAddition.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends patientAdditionDeleteManyArgs>(
      args?: SelectSubset<T, patientAdditionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientAdditions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patientAdditionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PatientAdditions
     * const patientAddition = await prisma.patientAddition.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends patientAdditionUpdateManyArgs>(
      args: SelectSubset<T, patientAdditionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one PatientAddition.
     * @param {patientAdditionUpsertArgs} args - Arguments to update or create a PatientAddition.
     * @example
     * // Update or create a PatientAddition
     * const patientAddition = await prisma.patientAddition.upsert({
     *   create: {
     *     // ... data to create a PatientAddition
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PatientAddition we want to update
     *   }
     * })
    **/
    upsert<T extends patientAdditionUpsertArgs>(
      args: SelectSubset<T, patientAdditionUpsertArgs>
    ): CheckSelect<T, Prisma__patientAdditionClient<patientAddition>, Prisma__patientAdditionClient<patientAdditionGetPayload<T>>>

    /**
     * Count the number of PatientAdditions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patientAdditionCountArgs} args - Arguments to filter PatientAdditions to count.
     * @example
     * // Count the number of PatientAdditions
     * const count = await prisma.patientAddition.count({
     *   where: {
     *     // ... the filter for the PatientAdditions we want to count
     *   }
     * })
    **/
    count<T extends patientAdditionCountArgs>(
      args?: Subset<T, patientAdditionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientAdditionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PatientAddition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAdditionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientAdditionAggregateArgs>(args: Subset<T, PatientAdditionAggregateArgs>): PrismaPromise<GetPatientAdditionAggregateType<T>>

    /**
     * Group by PatientAddition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAdditionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientAdditionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientAdditionGroupByArgs['orderBy'] }
        : { orderBy?: PatientAdditionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientAdditionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientAdditionGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for patientAddition.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__patientAdditionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * patientAddition findUnique
   */
  export type patientAdditionFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the patientAddition
     * 
    **/
    select?: patientAdditionSelect | null
    /**
     * Throw an Error if a patientAddition can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which patientAddition to fetch.
     * 
    **/
    where: patientAdditionWhereUniqueInput
  }


  /**
   * patientAddition findFirst
   */
  export type patientAdditionFindFirstArgs = {
    /**
     * Select specific fields to fetch from the patientAddition
     * 
    **/
    select?: patientAdditionSelect | null
    /**
     * Throw an Error if a patientAddition can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which patientAddition to fetch.
     * 
    **/
    where?: patientAdditionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of patientAdditions to fetch.
     * 
    **/
    orderBy?: Enumerable<patientAdditionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for patientAdditions.
     * 
    **/
    cursor?: patientAdditionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` patientAdditions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` patientAdditions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of patientAdditions.
     * 
    **/
    distinct?: Enumerable<PatientAdditionScalarFieldEnum>
  }


  /**
   * patientAddition findMany
   */
  export type patientAdditionFindManyArgs = {
    /**
     * Select specific fields to fetch from the patientAddition
     * 
    **/
    select?: patientAdditionSelect | null
    /**
     * Filter, which patientAdditions to fetch.
     * 
    **/
    where?: patientAdditionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of patientAdditions to fetch.
     * 
    **/
    orderBy?: Enumerable<patientAdditionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing patientAdditions.
     * 
    **/
    cursor?: patientAdditionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` patientAdditions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` patientAdditions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PatientAdditionScalarFieldEnum>
  }


  /**
   * patientAddition create
   */
  export type patientAdditionCreateArgs = {
    /**
     * Select specific fields to fetch from the patientAddition
     * 
    **/
    select?: patientAdditionSelect | null
    /**
     * The data needed to create a patientAddition.
     * 
    **/
    data: XOR<patientAdditionCreateInput, patientAdditionUncheckedCreateInput>
  }


  /**
   * patientAddition createMany
   */
  export type patientAdditionCreateManyArgs = {
    /**
     * The data used to create many patientAdditions.
     * 
    **/
    data: Enumerable<patientAdditionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * patientAddition update
   */
  export type patientAdditionUpdateArgs = {
    /**
     * Select specific fields to fetch from the patientAddition
     * 
    **/
    select?: patientAdditionSelect | null
    /**
     * The data needed to update a patientAddition.
     * 
    **/
    data: XOR<patientAdditionUpdateInput, patientAdditionUncheckedUpdateInput>
    /**
     * Choose, which patientAddition to update.
     * 
    **/
    where: patientAdditionWhereUniqueInput
  }


  /**
   * patientAddition updateMany
   */
  export type patientAdditionUpdateManyArgs = {
    /**
     * The data used to update patientAdditions.
     * 
    **/
    data: XOR<patientAdditionUpdateManyMutationInput, patientAdditionUncheckedUpdateManyInput>
    /**
     * Filter which patientAdditions to update
     * 
    **/
    where?: patientAdditionWhereInput
  }


  /**
   * patientAddition upsert
   */
  export type patientAdditionUpsertArgs = {
    /**
     * Select specific fields to fetch from the patientAddition
     * 
    **/
    select?: patientAdditionSelect | null
    /**
     * The filter to search for the patientAddition to update in case it exists.
     * 
    **/
    where: patientAdditionWhereUniqueInput
    /**
     * In case the patientAddition found by the `where` argument doesn't exist, create a new patientAddition with this data.
     * 
    **/
    create: XOR<patientAdditionCreateInput, patientAdditionUncheckedCreateInput>
    /**
     * In case the patientAddition was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<patientAdditionUpdateInput, patientAdditionUncheckedUpdateInput>
  }


  /**
   * patientAddition delete
   */
  export type patientAdditionDeleteArgs = {
    /**
     * Select specific fields to fetch from the patientAddition
     * 
    **/
    select?: patientAdditionSelect | null
    /**
     * Filter which patientAddition to delete.
     * 
    **/
    where: patientAdditionWhereUniqueInput
  }


  /**
   * patientAddition deleteMany
   */
  export type patientAdditionDeleteManyArgs = {
    /**
     * Filter which patientAdditions to delete
     * 
    **/
    where?: patientAdditionWhereInput
  }


  /**
   * patientAddition without action
   */
  export type patientAdditionArgs = {
    /**
     * Select specific fields to fetch from the patientAddition
     * 
    **/
    select?: patientAdditionSelect | null
  }



  /**
   * Model donation
   */


  export type AggregateDonation = {
    _count: DonationCountAggregateOutputType | null
    _avg: DonationAvgAggregateOutputType | null
    _sum: DonationSumAggregateOutputType | null
    _min: DonationMinAggregateOutputType | null
    _max: DonationMaxAggregateOutputType | null
  }

  export type DonationAvgAggregateOutputType = {
    donationId: number | null
  }

  export type DonationSumAggregateOutputType = {
    donationId: number | null
  }

  export type DonationMinAggregateOutputType = {
    donationId: number | null
    type: string | null
    amount: string | null
    status: boolean | null
    date: Date | null
    expiration: string | null
    added_by: string | null
  }

  export type DonationMaxAggregateOutputType = {
    donationId: number | null
    type: string | null
    amount: string | null
    status: boolean | null
    date: Date | null
    expiration: string | null
    added_by: string | null
  }

  export type DonationCountAggregateOutputType = {
    donationId: number
    type: number
    amount: number
    status: number
    date: number
    expiration: number
    added_by: number
    _all: number
  }


  export type DonationAvgAggregateInputType = {
    donationId?: true
  }

  export type DonationSumAggregateInputType = {
    donationId?: true
  }

  export type DonationMinAggregateInputType = {
    donationId?: true
    type?: true
    amount?: true
    status?: true
    date?: true
    expiration?: true
    added_by?: true
  }

  export type DonationMaxAggregateInputType = {
    donationId?: true
    type?: true
    amount?: true
    status?: true
    date?: true
    expiration?: true
    added_by?: true
  }

  export type DonationCountAggregateInputType = {
    donationId?: true
    type?: true
    amount?: true
    status?: true
    date?: true
    expiration?: true
    added_by?: true
    _all?: true
  }

  export type DonationAggregateArgs = {
    /**
     * Filter which donation to aggregate.
     * 
    **/
    where?: donationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of donations to fetch.
     * 
    **/
    orderBy?: Enumerable<donationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: donationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` donations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` donations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned donations
    **/
    _count?: true | DonationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DonationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DonationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DonationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DonationMaxAggregateInputType
  }

  export type GetDonationAggregateType<T extends DonationAggregateArgs> = {
        [P in keyof T & keyof AggregateDonation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDonation[P]>
      : GetScalarType<T[P], AggregateDonation[P]>
  }




  export type DonationGroupByArgs = {
    where?: donationWhereInput
    orderBy?: Enumerable<donationOrderByWithAggregationInput>
    by: Array<DonationScalarFieldEnum>
    having?: donationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DonationCountAggregateInputType | true
    _avg?: DonationAvgAggregateInputType
    _sum?: DonationSumAggregateInputType
    _min?: DonationMinAggregateInputType
    _max?: DonationMaxAggregateInputType
  }


  export type DonationGroupByOutputType = {
    donationId: number
    type: string
    amount: string
    status: boolean
    date: Date
    expiration: string
    added_by: string
    _count: DonationCountAggregateOutputType | null
    _avg: DonationAvgAggregateOutputType | null
    _sum: DonationSumAggregateOutputType | null
    _min: DonationMinAggregateOutputType | null
    _max: DonationMaxAggregateOutputType | null
  }

  type GetDonationGroupByPayload<T extends DonationGroupByArgs> = PrismaPromise<
    Array<
      PickArray<DonationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DonationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DonationGroupByOutputType[P]>
            : GetScalarType<T[P], DonationGroupByOutputType[P]>
        }
      >
    >


  export type donationSelect = {
    donationId?: boolean
    type?: boolean
    amount?: boolean
    status?: boolean
    date?: boolean
    expiration?: boolean
    added_by?: boolean
  }

  export type donationGetPayload<
    S extends boolean | null | undefined | donationArgs,
    U = keyof S
      > = S extends true
        ? donation
    : S extends undefined
    ? never
    : S extends donationArgs | donationFindManyArgs
    ?'include' extends U
    ? donation 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof donation ? donation[P] : never
  } 
    : donation
  : donation


  type donationCountArgs = Merge<
    Omit<donationFindManyArgs, 'select' | 'include'> & {
      select?: DonationCountAggregateInputType | true
    }
  >

  export interface donationDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Donation that matches the filter.
     * @param {donationFindUniqueArgs} args - Arguments to find a Donation
     * @example
     * // Get one Donation
     * const donation = await prisma.donation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends donationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, donationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'donation'> extends True ? CheckSelect<T, Prisma__donationClient<donation>, Prisma__donationClient<donationGetPayload<T>>> : CheckSelect<T, Prisma__donationClient<donation | null >, Prisma__donationClient<donationGetPayload<T> | null >>

    /**
     * Find the first Donation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {donationFindFirstArgs} args - Arguments to find a Donation
     * @example
     * // Get one Donation
     * const donation = await prisma.donation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends donationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, donationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'donation'> extends True ? CheckSelect<T, Prisma__donationClient<donation>, Prisma__donationClient<donationGetPayload<T>>> : CheckSelect<T, Prisma__donationClient<donation | null >, Prisma__donationClient<donationGetPayload<T> | null >>

    /**
     * Find zero or more Donations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {donationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Donations
     * const donations = await prisma.donation.findMany()
     * 
     * // Get first 10 Donations
     * const donations = await prisma.donation.findMany({ take: 10 })
     * 
     * // Only select the `donationId`
     * const donationWithDonationIdOnly = await prisma.donation.findMany({ select: { donationId: true } })
     * 
    **/
    findMany<T extends donationFindManyArgs>(
      args?: SelectSubset<T, donationFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<donation>>, PrismaPromise<Array<donationGetPayload<T>>>>

    /**
     * Create a Donation.
     * @param {donationCreateArgs} args - Arguments to create a Donation.
     * @example
     * // Create one Donation
     * const Donation = await prisma.donation.create({
     *   data: {
     *     // ... data to create a Donation
     *   }
     * })
     * 
    **/
    create<T extends donationCreateArgs>(
      args: SelectSubset<T, donationCreateArgs>
    ): CheckSelect<T, Prisma__donationClient<donation>, Prisma__donationClient<donationGetPayload<T>>>

    /**
     * Create many Donations.
     *     @param {donationCreateManyArgs} args - Arguments to create many Donations.
     *     @example
     *     // Create many Donations
     *     const donation = await prisma.donation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends donationCreateManyArgs>(
      args?: SelectSubset<T, donationCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Donation.
     * @param {donationDeleteArgs} args - Arguments to delete one Donation.
     * @example
     * // Delete one Donation
     * const Donation = await prisma.donation.delete({
     *   where: {
     *     // ... filter to delete one Donation
     *   }
     * })
     * 
    **/
    delete<T extends donationDeleteArgs>(
      args: SelectSubset<T, donationDeleteArgs>
    ): CheckSelect<T, Prisma__donationClient<donation>, Prisma__donationClient<donationGetPayload<T>>>

    /**
     * Update one Donation.
     * @param {donationUpdateArgs} args - Arguments to update one Donation.
     * @example
     * // Update one Donation
     * const donation = await prisma.donation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends donationUpdateArgs>(
      args: SelectSubset<T, donationUpdateArgs>
    ): CheckSelect<T, Prisma__donationClient<donation>, Prisma__donationClient<donationGetPayload<T>>>

    /**
     * Delete zero or more Donations.
     * @param {donationDeleteManyArgs} args - Arguments to filter Donations to delete.
     * @example
     * // Delete a few Donations
     * const { count } = await prisma.donation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends donationDeleteManyArgs>(
      args?: SelectSubset<T, donationDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Donations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {donationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Donations
     * const donation = await prisma.donation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends donationUpdateManyArgs>(
      args: SelectSubset<T, donationUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Donation.
     * @param {donationUpsertArgs} args - Arguments to update or create a Donation.
     * @example
     * // Update or create a Donation
     * const donation = await prisma.donation.upsert({
     *   create: {
     *     // ... data to create a Donation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Donation we want to update
     *   }
     * })
    **/
    upsert<T extends donationUpsertArgs>(
      args: SelectSubset<T, donationUpsertArgs>
    ): CheckSelect<T, Prisma__donationClient<donation>, Prisma__donationClient<donationGetPayload<T>>>

    /**
     * Count the number of Donations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {donationCountArgs} args - Arguments to filter Donations to count.
     * @example
     * // Count the number of Donations
     * const count = await prisma.donation.count({
     *   where: {
     *     // ... the filter for the Donations we want to count
     *   }
     * })
    **/
    count<T extends donationCountArgs>(
      args?: Subset<T, donationCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DonationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Donation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DonationAggregateArgs>(args: Subset<T, DonationAggregateArgs>): PrismaPromise<GetDonationAggregateType<T>>

    /**
     * Group by Donation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DonationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DonationGroupByArgs['orderBy'] }
        : { orderBy?: DonationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DonationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDonationGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for donation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__donationClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * donation findUnique
   */
  export type donationFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the donation
     * 
    **/
    select?: donationSelect | null
    /**
     * Throw an Error if a donation can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which donation to fetch.
     * 
    **/
    where: donationWhereUniqueInput
  }


  /**
   * donation findFirst
   */
  export type donationFindFirstArgs = {
    /**
     * Select specific fields to fetch from the donation
     * 
    **/
    select?: donationSelect | null
    /**
     * Throw an Error if a donation can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which donation to fetch.
     * 
    **/
    where?: donationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of donations to fetch.
     * 
    **/
    orderBy?: Enumerable<donationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for donations.
     * 
    **/
    cursor?: donationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` donations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` donations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of donations.
     * 
    **/
    distinct?: Enumerable<DonationScalarFieldEnum>
  }


  /**
   * donation findMany
   */
  export type donationFindManyArgs = {
    /**
     * Select specific fields to fetch from the donation
     * 
    **/
    select?: donationSelect | null
    /**
     * Filter, which donations to fetch.
     * 
    **/
    where?: donationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of donations to fetch.
     * 
    **/
    orderBy?: Enumerable<donationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing donations.
     * 
    **/
    cursor?: donationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` donations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` donations.
     * 
    **/
    skip?: number
    distinct?: Enumerable<DonationScalarFieldEnum>
  }


  /**
   * donation create
   */
  export type donationCreateArgs = {
    /**
     * Select specific fields to fetch from the donation
     * 
    **/
    select?: donationSelect | null
    /**
     * The data needed to create a donation.
     * 
    **/
    data: XOR<donationCreateInput, donationUncheckedCreateInput>
  }


  /**
   * donation createMany
   */
  export type donationCreateManyArgs = {
    /**
     * The data used to create many donations.
     * 
    **/
    data: Enumerable<donationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * donation update
   */
  export type donationUpdateArgs = {
    /**
     * Select specific fields to fetch from the donation
     * 
    **/
    select?: donationSelect | null
    /**
     * The data needed to update a donation.
     * 
    **/
    data: XOR<donationUpdateInput, donationUncheckedUpdateInput>
    /**
     * Choose, which donation to update.
     * 
    **/
    where: donationWhereUniqueInput
  }


  /**
   * donation updateMany
   */
  export type donationUpdateManyArgs = {
    /**
     * The data used to update donations.
     * 
    **/
    data: XOR<donationUpdateManyMutationInput, donationUncheckedUpdateManyInput>
    /**
     * Filter which donations to update
     * 
    **/
    where?: donationWhereInput
  }


  /**
   * donation upsert
   */
  export type donationUpsertArgs = {
    /**
     * Select specific fields to fetch from the donation
     * 
    **/
    select?: donationSelect | null
    /**
     * The filter to search for the donation to update in case it exists.
     * 
    **/
    where: donationWhereUniqueInput
    /**
     * In case the donation found by the `where` argument doesn't exist, create a new donation with this data.
     * 
    **/
    create: XOR<donationCreateInput, donationUncheckedCreateInput>
    /**
     * In case the donation was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<donationUpdateInput, donationUncheckedUpdateInput>
  }


  /**
   * donation delete
   */
  export type donationDeleteArgs = {
    /**
     * Select specific fields to fetch from the donation
     * 
    **/
    select?: donationSelect | null
    /**
     * Filter which donation to delete.
     * 
    **/
    where: donationWhereUniqueInput
  }


  /**
   * donation deleteMany
   */
  export type donationDeleteManyArgs = {
    /**
     * Filter which donations to delete
     * 
    **/
    where?: donationWhereInput
  }


  /**
   * donation without action
   */
  export type donationArgs = {
    /**
     * Select specific fields to fetch from the donation
     * 
    **/
    select?: donationSelect | null
  }



  /**
   * Model donationOrg
   */


  export type AggregateDonationOrg = {
    _count: DonationOrgCountAggregateOutputType | null
    _avg: DonationOrgAvgAggregateOutputType | null
    _sum: DonationOrgSumAggregateOutputType | null
    _min: DonationOrgMinAggregateOutputType | null
    _max: DonationOrgMaxAggregateOutputType | null
  }

  export type DonationOrgAvgAggregateOutputType = {
    donationId: number | null
    amount: number | null
    orgId: number | null
  }

  export type DonationOrgSumAggregateOutputType = {
    donationId: number | null
    amount: number | null
    orgId: number | null
  }

  export type DonationOrgMinAggregateOutputType = {
    donationId: number | null
    type: string | null
    amount: number | null
    status: boolean | null
    orgId: number | null
    date: Date | null
    donateBy: string | null
  }

  export type DonationOrgMaxAggregateOutputType = {
    donationId: number | null
    type: string | null
    amount: number | null
    status: boolean | null
    orgId: number | null
    date: Date | null
    donateBy: string | null
  }

  export type DonationOrgCountAggregateOutputType = {
    donationId: number
    type: number
    amount: number
    status: number
    orgId: number
    date: number
    donateBy: number
    _all: number
  }


  export type DonationOrgAvgAggregateInputType = {
    donationId?: true
    amount?: true
    orgId?: true
  }

  export type DonationOrgSumAggregateInputType = {
    donationId?: true
    amount?: true
    orgId?: true
  }

  export type DonationOrgMinAggregateInputType = {
    donationId?: true
    type?: true
    amount?: true
    status?: true
    orgId?: true
    date?: true
    donateBy?: true
  }

  export type DonationOrgMaxAggregateInputType = {
    donationId?: true
    type?: true
    amount?: true
    status?: true
    orgId?: true
    date?: true
    donateBy?: true
  }

  export type DonationOrgCountAggregateInputType = {
    donationId?: true
    type?: true
    amount?: true
    status?: true
    orgId?: true
    date?: true
    donateBy?: true
    _all?: true
  }

  export type DonationOrgAggregateArgs = {
    /**
     * Filter which donationOrg to aggregate.
     * 
    **/
    where?: donationOrgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of donationOrgs to fetch.
     * 
    **/
    orderBy?: Enumerable<donationOrgOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: donationOrgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` donationOrgs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` donationOrgs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned donationOrgs
    **/
    _count?: true | DonationOrgCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DonationOrgAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DonationOrgSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DonationOrgMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DonationOrgMaxAggregateInputType
  }

  export type GetDonationOrgAggregateType<T extends DonationOrgAggregateArgs> = {
        [P in keyof T & keyof AggregateDonationOrg]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDonationOrg[P]>
      : GetScalarType<T[P], AggregateDonationOrg[P]>
  }




  export type DonationOrgGroupByArgs = {
    where?: donationOrgWhereInput
    orderBy?: Enumerable<donationOrgOrderByWithAggregationInput>
    by: Array<DonationOrgScalarFieldEnum>
    having?: donationOrgScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DonationOrgCountAggregateInputType | true
    _avg?: DonationOrgAvgAggregateInputType
    _sum?: DonationOrgSumAggregateInputType
    _min?: DonationOrgMinAggregateInputType
    _max?: DonationOrgMaxAggregateInputType
  }


  export type DonationOrgGroupByOutputType = {
    donationId: number
    type: string
    amount: number
    status: boolean
    orgId: number
    date: Date
    donateBy: string
    _count: DonationOrgCountAggregateOutputType | null
    _avg: DonationOrgAvgAggregateOutputType | null
    _sum: DonationOrgSumAggregateOutputType | null
    _min: DonationOrgMinAggregateOutputType | null
    _max: DonationOrgMaxAggregateOutputType | null
  }

  type GetDonationOrgGroupByPayload<T extends DonationOrgGroupByArgs> = PrismaPromise<
    Array<
      PickArray<DonationOrgGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DonationOrgGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DonationOrgGroupByOutputType[P]>
            : GetScalarType<T[P], DonationOrgGroupByOutputType[P]>
        }
      >
    >


  export type donationOrgSelect = {
    donationId?: boolean
    type?: boolean
    amount?: boolean
    status?: boolean
    orgId?: boolean
    date?: boolean
    donateBy?: boolean
  }

  export type donationOrgGetPayload<
    S extends boolean | null | undefined | donationOrgArgs,
    U = keyof S
      > = S extends true
        ? donationOrg
    : S extends undefined
    ? never
    : S extends donationOrgArgs | donationOrgFindManyArgs
    ?'include' extends U
    ? donationOrg 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof donationOrg ? donationOrg[P] : never
  } 
    : donationOrg
  : donationOrg


  type donationOrgCountArgs = Merge<
    Omit<donationOrgFindManyArgs, 'select' | 'include'> & {
      select?: DonationOrgCountAggregateInputType | true
    }
  >

  export interface donationOrgDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one DonationOrg that matches the filter.
     * @param {donationOrgFindUniqueArgs} args - Arguments to find a DonationOrg
     * @example
     * // Get one DonationOrg
     * const donationOrg = await prisma.donationOrg.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends donationOrgFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, donationOrgFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'donationOrg'> extends True ? CheckSelect<T, Prisma__donationOrgClient<donationOrg>, Prisma__donationOrgClient<donationOrgGetPayload<T>>> : CheckSelect<T, Prisma__donationOrgClient<donationOrg | null >, Prisma__donationOrgClient<donationOrgGetPayload<T> | null >>

    /**
     * Find the first DonationOrg that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {donationOrgFindFirstArgs} args - Arguments to find a DonationOrg
     * @example
     * // Get one DonationOrg
     * const donationOrg = await prisma.donationOrg.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends donationOrgFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, donationOrgFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'donationOrg'> extends True ? CheckSelect<T, Prisma__donationOrgClient<donationOrg>, Prisma__donationOrgClient<donationOrgGetPayload<T>>> : CheckSelect<T, Prisma__donationOrgClient<donationOrg | null >, Prisma__donationOrgClient<donationOrgGetPayload<T> | null >>

    /**
     * Find zero or more DonationOrgs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {donationOrgFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DonationOrgs
     * const donationOrgs = await prisma.donationOrg.findMany()
     * 
     * // Get first 10 DonationOrgs
     * const donationOrgs = await prisma.donationOrg.findMany({ take: 10 })
     * 
     * // Only select the `donationId`
     * const donationOrgWithDonationIdOnly = await prisma.donationOrg.findMany({ select: { donationId: true } })
     * 
    **/
    findMany<T extends donationOrgFindManyArgs>(
      args?: SelectSubset<T, donationOrgFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<donationOrg>>, PrismaPromise<Array<donationOrgGetPayload<T>>>>

    /**
     * Create a DonationOrg.
     * @param {donationOrgCreateArgs} args - Arguments to create a DonationOrg.
     * @example
     * // Create one DonationOrg
     * const DonationOrg = await prisma.donationOrg.create({
     *   data: {
     *     // ... data to create a DonationOrg
     *   }
     * })
     * 
    **/
    create<T extends donationOrgCreateArgs>(
      args: SelectSubset<T, donationOrgCreateArgs>
    ): CheckSelect<T, Prisma__donationOrgClient<donationOrg>, Prisma__donationOrgClient<donationOrgGetPayload<T>>>

    /**
     * Create many DonationOrgs.
     *     @param {donationOrgCreateManyArgs} args - Arguments to create many DonationOrgs.
     *     @example
     *     // Create many DonationOrgs
     *     const donationOrg = await prisma.donationOrg.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends donationOrgCreateManyArgs>(
      args?: SelectSubset<T, donationOrgCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a DonationOrg.
     * @param {donationOrgDeleteArgs} args - Arguments to delete one DonationOrg.
     * @example
     * // Delete one DonationOrg
     * const DonationOrg = await prisma.donationOrg.delete({
     *   where: {
     *     // ... filter to delete one DonationOrg
     *   }
     * })
     * 
    **/
    delete<T extends donationOrgDeleteArgs>(
      args: SelectSubset<T, donationOrgDeleteArgs>
    ): CheckSelect<T, Prisma__donationOrgClient<donationOrg>, Prisma__donationOrgClient<donationOrgGetPayload<T>>>

    /**
     * Update one DonationOrg.
     * @param {donationOrgUpdateArgs} args - Arguments to update one DonationOrg.
     * @example
     * // Update one DonationOrg
     * const donationOrg = await prisma.donationOrg.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends donationOrgUpdateArgs>(
      args: SelectSubset<T, donationOrgUpdateArgs>
    ): CheckSelect<T, Prisma__donationOrgClient<donationOrg>, Prisma__donationOrgClient<donationOrgGetPayload<T>>>

    /**
     * Delete zero or more DonationOrgs.
     * @param {donationOrgDeleteManyArgs} args - Arguments to filter DonationOrgs to delete.
     * @example
     * // Delete a few DonationOrgs
     * const { count } = await prisma.donationOrg.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends donationOrgDeleteManyArgs>(
      args?: SelectSubset<T, donationOrgDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more DonationOrgs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {donationOrgUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DonationOrgs
     * const donationOrg = await prisma.donationOrg.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends donationOrgUpdateManyArgs>(
      args: SelectSubset<T, donationOrgUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one DonationOrg.
     * @param {donationOrgUpsertArgs} args - Arguments to update or create a DonationOrg.
     * @example
     * // Update or create a DonationOrg
     * const donationOrg = await prisma.donationOrg.upsert({
     *   create: {
     *     // ... data to create a DonationOrg
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DonationOrg we want to update
     *   }
     * })
    **/
    upsert<T extends donationOrgUpsertArgs>(
      args: SelectSubset<T, donationOrgUpsertArgs>
    ): CheckSelect<T, Prisma__donationOrgClient<donationOrg>, Prisma__donationOrgClient<donationOrgGetPayload<T>>>

    /**
     * Count the number of DonationOrgs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {donationOrgCountArgs} args - Arguments to filter DonationOrgs to count.
     * @example
     * // Count the number of DonationOrgs
     * const count = await prisma.donationOrg.count({
     *   where: {
     *     // ... the filter for the DonationOrgs we want to count
     *   }
     * })
    **/
    count<T extends donationOrgCountArgs>(
      args?: Subset<T, donationOrgCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DonationOrgCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DonationOrg.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationOrgAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DonationOrgAggregateArgs>(args: Subset<T, DonationOrgAggregateArgs>): PrismaPromise<GetDonationOrgAggregateType<T>>

    /**
     * Group by DonationOrg.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationOrgGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DonationOrgGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DonationOrgGroupByArgs['orderBy'] }
        : { orderBy?: DonationOrgGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DonationOrgGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDonationOrgGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for donationOrg.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__donationOrgClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * donationOrg findUnique
   */
  export type donationOrgFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the donationOrg
     * 
    **/
    select?: donationOrgSelect | null
    /**
     * Throw an Error if a donationOrg can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which donationOrg to fetch.
     * 
    **/
    where: donationOrgWhereUniqueInput
  }


  /**
   * donationOrg findFirst
   */
  export type donationOrgFindFirstArgs = {
    /**
     * Select specific fields to fetch from the donationOrg
     * 
    **/
    select?: donationOrgSelect | null
    /**
     * Throw an Error if a donationOrg can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which donationOrg to fetch.
     * 
    **/
    where?: donationOrgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of donationOrgs to fetch.
     * 
    **/
    orderBy?: Enumerable<donationOrgOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for donationOrgs.
     * 
    **/
    cursor?: donationOrgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` donationOrgs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` donationOrgs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of donationOrgs.
     * 
    **/
    distinct?: Enumerable<DonationOrgScalarFieldEnum>
  }


  /**
   * donationOrg findMany
   */
  export type donationOrgFindManyArgs = {
    /**
     * Select specific fields to fetch from the donationOrg
     * 
    **/
    select?: donationOrgSelect | null
    /**
     * Filter, which donationOrgs to fetch.
     * 
    **/
    where?: donationOrgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of donationOrgs to fetch.
     * 
    **/
    orderBy?: Enumerable<donationOrgOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing donationOrgs.
     * 
    **/
    cursor?: donationOrgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` donationOrgs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` donationOrgs.
     * 
    **/
    skip?: number
    distinct?: Enumerable<DonationOrgScalarFieldEnum>
  }


  /**
   * donationOrg create
   */
  export type donationOrgCreateArgs = {
    /**
     * Select specific fields to fetch from the donationOrg
     * 
    **/
    select?: donationOrgSelect | null
    /**
     * The data needed to create a donationOrg.
     * 
    **/
    data: XOR<donationOrgCreateInput, donationOrgUncheckedCreateInput>
  }


  /**
   * donationOrg createMany
   */
  export type donationOrgCreateManyArgs = {
    /**
     * The data used to create many donationOrgs.
     * 
    **/
    data: Enumerable<donationOrgCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * donationOrg update
   */
  export type donationOrgUpdateArgs = {
    /**
     * Select specific fields to fetch from the donationOrg
     * 
    **/
    select?: donationOrgSelect | null
    /**
     * The data needed to update a donationOrg.
     * 
    **/
    data: XOR<donationOrgUpdateInput, donationOrgUncheckedUpdateInput>
    /**
     * Choose, which donationOrg to update.
     * 
    **/
    where: donationOrgWhereUniqueInput
  }


  /**
   * donationOrg updateMany
   */
  export type donationOrgUpdateManyArgs = {
    /**
     * The data used to update donationOrgs.
     * 
    **/
    data: XOR<donationOrgUpdateManyMutationInput, donationOrgUncheckedUpdateManyInput>
    /**
     * Filter which donationOrgs to update
     * 
    **/
    where?: donationOrgWhereInput
  }


  /**
   * donationOrg upsert
   */
  export type donationOrgUpsertArgs = {
    /**
     * Select specific fields to fetch from the donationOrg
     * 
    **/
    select?: donationOrgSelect | null
    /**
     * The filter to search for the donationOrg to update in case it exists.
     * 
    **/
    where: donationOrgWhereUniqueInput
    /**
     * In case the donationOrg found by the `where` argument doesn't exist, create a new donationOrg with this data.
     * 
    **/
    create: XOR<donationOrgCreateInput, donationOrgUncheckedCreateInput>
    /**
     * In case the donationOrg was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<donationOrgUpdateInput, donationOrgUncheckedUpdateInput>
  }


  /**
   * donationOrg delete
   */
  export type donationOrgDeleteArgs = {
    /**
     * Select specific fields to fetch from the donationOrg
     * 
    **/
    select?: donationOrgSelect | null
    /**
     * Filter which donationOrg to delete.
     * 
    **/
    where: donationOrgWhereUniqueInput
  }


  /**
   * donationOrg deleteMany
   */
  export type donationOrgDeleteManyArgs = {
    /**
     * Filter which donationOrgs to delete
     * 
    **/
    where?: donationOrgWhereInput
  }


  /**
   * donationOrg without action
   */
  export type donationOrgArgs = {
    /**
     * Select specific fields to fetch from the donationOrg
     * 
    **/
    select?: donationOrgSelect | null
  }



  /**
   * Model admin
   */


  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminAvgAggregateOutputType = {
    id: number | null
  }

  export type AdminSumAggregateOutputType = {
    id: number | null
  }

  export type AdminMinAggregateOutputType = {
    id: number | null
    userName: string | null
    name: string | null
    role: string | null
    password: string | null
  }

  export type AdminMaxAggregateOutputType = {
    id: number | null
    userName: string | null
    name: string | null
    role: string | null
    password: string | null
  }

  export type AdminCountAggregateOutputType = {
    id: number
    userName: number
    name: number
    role: number
    password: number
    _all: number
  }


  export type AdminAvgAggregateInputType = {
    id?: true
  }

  export type AdminSumAggregateInputType = {
    id?: true
  }

  export type AdminMinAggregateInputType = {
    id?: true
    userName?: true
    name?: true
    role?: true
    password?: true
  }

  export type AdminMaxAggregateInputType = {
    id?: true
    userName?: true
    name?: true
    role?: true
    password?: true
  }

  export type AdminCountAggregateInputType = {
    id?: true
    userName?: true
    name?: true
    role?: true
    password?: true
    _all?: true
  }

  export type AdminAggregateArgs = {
    /**
     * Filter which admin to aggregate.
     * 
    **/
    where?: adminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of admins to fetch.
     * 
    **/
    orderBy?: Enumerable<adminOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: adminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` admins from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` admins.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs = {
    where?: adminWhereInput
    orderBy?: Enumerable<adminOrderByWithAggregationInput>
    by: Array<AdminScalarFieldEnum>
    having?: adminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _avg?: AdminAvgAggregateInputType
    _sum?: AdminSumAggregateInputType
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }


  export type AdminGroupByOutputType = {
    id: number
    userName: string
    name: string
    role: string
    password: string
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type adminSelect = {
    id?: boolean
    userName?: boolean
    name?: boolean
    role?: boolean
    password?: boolean
  }

  export type adminGetPayload<
    S extends boolean | null | undefined | adminArgs,
    U = keyof S
      > = S extends true
        ? admin
    : S extends undefined
    ? never
    : S extends adminArgs | adminFindManyArgs
    ?'include' extends U
    ? admin 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof admin ? admin[P] : never
  } 
    : admin
  : admin


  type adminCountArgs = Merge<
    Omit<adminFindManyArgs, 'select' | 'include'> & {
      select?: AdminCountAggregateInputType | true
    }
  >

  export interface adminDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Admin that matches the filter.
     * @param {adminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends adminFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, adminFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'admin'> extends True ? CheckSelect<T, Prisma__adminClient<admin>, Prisma__adminClient<adminGetPayload<T>>> : CheckSelect<T, Prisma__adminClient<admin | null >, Prisma__adminClient<adminGetPayload<T> | null >>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends adminFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, adminFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'admin'> extends True ? CheckSelect<T, Prisma__adminClient<admin>, Prisma__adminClient<adminGetPayload<T>>> : CheckSelect<T, Prisma__adminClient<admin | null >, Prisma__adminClient<adminGetPayload<T> | null >>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminWithIdOnly = await prisma.admin.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends adminFindManyArgs>(
      args?: SelectSubset<T, adminFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<admin>>, PrismaPromise<Array<adminGetPayload<T>>>>

    /**
     * Create a Admin.
     * @param {adminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
    **/
    create<T extends adminCreateArgs>(
      args: SelectSubset<T, adminCreateArgs>
    ): CheckSelect<T, Prisma__adminClient<admin>, Prisma__adminClient<adminGetPayload<T>>>

    /**
     * Create many Admins.
     *     @param {adminCreateManyArgs} args - Arguments to create many Admins.
     *     @example
     *     // Create many Admins
     *     const admin = await prisma.admin.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends adminCreateManyArgs>(
      args?: SelectSubset<T, adminCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Admin.
     * @param {adminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
    **/
    delete<T extends adminDeleteArgs>(
      args: SelectSubset<T, adminDeleteArgs>
    ): CheckSelect<T, Prisma__adminClient<admin>, Prisma__adminClient<adminGetPayload<T>>>

    /**
     * Update one Admin.
     * @param {adminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends adminUpdateArgs>(
      args: SelectSubset<T, adminUpdateArgs>
    ): CheckSelect<T, Prisma__adminClient<admin>, Prisma__adminClient<adminGetPayload<T>>>

    /**
     * Delete zero or more Admins.
     * @param {adminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends adminDeleteManyArgs>(
      args?: SelectSubset<T, adminDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends adminUpdateManyArgs>(
      args: SelectSubset<T, adminUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Admin.
     * @param {adminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
    **/
    upsert<T extends adminUpsertArgs>(
      args: SelectSubset<T, adminUpsertArgs>
    ): CheckSelect<T, Prisma__adminClient<admin>, Prisma__adminClient<adminGetPayload<T>>>

    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends adminCountArgs>(
      args?: Subset<T, adminCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__adminClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * admin findUnique
   */
  export type adminFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the admin
     * 
    **/
    select?: adminSelect | null
    /**
     * Throw an Error if a admin can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which admin to fetch.
     * 
    **/
    where: adminWhereUniqueInput
  }


  /**
   * admin findFirst
   */
  export type adminFindFirstArgs = {
    /**
     * Select specific fields to fetch from the admin
     * 
    **/
    select?: adminSelect | null
    /**
     * Throw an Error if a admin can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which admin to fetch.
     * 
    **/
    where?: adminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of admins to fetch.
     * 
    **/
    orderBy?: Enumerable<adminOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for admins.
     * 
    **/
    cursor?: adminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` admins from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` admins.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of admins.
     * 
    **/
    distinct?: Enumerable<AdminScalarFieldEnum>
  }


  /**
   * admin findMany
   */
  export type adminFindManyArgs = {
    /**
     * Select specific fields to fetch from the admin
     * 
    **/
    select?: adminSelect | null
    /**
     * Filter, which admins to fetch.
     * 
    **/
    where?: adminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of admins to fetch.
     * 
    **/
    orderBy?: Enumerable<adminOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing admins.
     * 
    **/
    cursor?: adminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` admins from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` admins.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AdminScalarFieldEnum>
  }


  /**
   * admin create
   */
  export type adminCreateArgs = {
    /**
     * Select specific fields to fetch from the admin
     * 
    **/
    select?: adminSelect | null
    /**
     * The data needed to create a admin.
     * 
    **/
    data: XOR<adminCreateInput, adminUncheckedCreateInput>
  }


  /**
   * admin createMany
   */
  export type adminCreateManyArgs = {
    /**
     * The data used to create many admins.
     * 
    **/
    data: Enumerable<adminCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * admin update
   */
  export type adminUpdateArgs = {
    /**
     * Select specific fields to fetch from the admin
     * 
    **/
    select?: adminSelect | null
    /**
     * The data needed to update a admin.
     * 
    **/
    data: XOR<adminUpdateInput, adminUncheckedUpdateInput>
    /**
     * Choose, which admin to update.
     * 
    **/
    where: adminWhereUniqueInput
  }


  /**
   * admin updateMany
   */
  export type adminUpdateManyArgs = {
    /**
     * The data used to update admins.
     * 
    **/
    data: XOR<adminUpdateManyMutationInput, adminUncheckedUpdateManyInput>
    /**
     * Filter which admins to update
     * 
    **/
    where?: adminWhereInput
  }


  /**
   * admin upsert
   */
  export type adminUpsertArgs = {
    /**
     * Select specific fields to fetch from the admin
     * 
    **/
    select?: adminSelect | null
    /**
     * The filter to search for the admin to update in case it exists.
     * 
    **/
    where: adminWhereUniqueInput
    /**
     * In case the admin found by the `where` argument doesn't exist, create a new admin with this data.
     * 
    **/
    create: XOR<adminCreateInput, adminUncheckedCreateInput>
    /**
     * In case the admin was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<adminUpdateInput, adminUncheckedUpdateInput>
  }


  /**
   * admin delete
   */
  export type adminDeleteArgs = {
    /**
     * Select specific fields to fetch from the admin
     * 
    **/
    select?: adminSelect | null
    /**
     * Filter which admin to delete.
     * 
    **/
    where: adminWhereUniqueInput
  }


  /**
   * admin deleteMany
   */
  export type adminDeleteManyArgs = {
    /**
     * Filter which admins to delete
     * 
    **/
    where?: adminWhereInput
  }


  /**
   * admin without action
   */
  export type adminArgs = {
    /**
     * Select specific fields to fetch from the admin
     * 
    **/
    select?: adminSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    password: 'password',
    email: 'email',
    phoneNo: 'phoneNo',
    address: 'address',
    date: 'date',
    isVolunteer: 'isVolunteer'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const OrganizationScalarFieldEnum: {
    org_id: 'org_id',
    orgName: 'orgName',
    contact: 'contact',
    ew: 'ew',
    address: 'address',
    added_by: 'added_by'
  };

  export type OrganizationScalarFieldEnum = (typeof OrganizationScalarFieldEnum)[keyof typeof OrganizationScalarFieldEnum]


  export const PatientAdditionScalarFieldEnum: {
    paitient_id: 'paitient_id',
    patient_name: 'patient_name',
    hospital: 'hospital',
    location: 'location',
    description: 'description',
    time: 'time',
    added_by: 'added_by'
  };

  export type PatientAdditionScalarFieldEnum = (typeof PatientAdditionScalarFieldEnum)[keyof typeof PatientAdditionScalarFieldEnum]


  export const DonationScalarFieldEnum: {
    donationId: 'donationId',
    type: 'type',
    amount: 'amount',
    status: 'status',
    date: 'date',
    expiration: 'expiration',
    added_by: 'added_by'
  };

  export type DonationScalarFieldEnum = (typeof DonationScalarFieldEnum)[keyof typeof DonationScalarFieldEnum]


  export const DonationOrgScalarFieldEnum: {
    donationId: 'donationId',
    type: 'type',
    amount: 'amount',
    status: 'status',
    orgId: 'orgId',
    date: 'date',
    donateBy: 'donateBy'
  };

  export type DonationOrgScalarFieldEnum = (typeof DonationOrgScalarFieldEnum)[keyof typeof DonationOrgScalarFieldEnum]


  export const AdminScalarFieldEnum: {
    id: 'id',
    userName: 'userName',
    name: 'name',
    role: 'role',
    password: 'password'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    password?: StringFilter | string
    email?: StringFilter | string
    phoneNo?: StringFilter | string
    address?: StringFilter | string
    date?: DateTimeFilter | Date | string
    isVolunteer?: BoolFilter | boolean
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    password?: SortOrder
    email?: SortOrder
    phoneNo?: SortOrder
    address?: SortOrder
    date?: SortOrder
    isVolunteer?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
    phoneNo?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    password?: SortOrder
    email?: SortOrder
    phoneNo?: SortOrder
    address?: SortOrder
    date?: SortOrder
    isVolunteer?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    firstName?: StringWithAggregatesFilter | string
    lastName?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    phoneNo?: StringWithAggregatesFilter | string
    address?: StringWithAggregatesFilter | string
    date?: DateTimeWithAggregatesFilter | Date | string
    isVolunteer?: BoolWithAggregatesFilter | boolean
  }

  export type organizationWhereInput = {
    AND?: Enumerable<organizationWhereInput>
    OR?: Enumerable<organizationWhereInput>
    NOT?: Enumerable<organizationWhereInput>
    org_id?: IntFilter | number
    orgName?: StringFilter | string
    contact?: StringFilter | string
    ew?: StringFilter | string
    address?: StringFilter | string
    added_by?: StringFilter | string
  }

  export type organizationOrderByWithRelationInput = {
    org_id?: SortOrder
    orgName?: SortOrder
    contact?: SortOrder
    ew?: SortOrder
    address?: SortOrder
    added_by?: SortOrder
  }

  export type organizationWhereUniqueInput = {
    org_id?: number
    orgName?: string
  }

  export type organizationOrderByWithAggregationInput = {
    org_id?: SortOrder
    orgName?: SortOrder
    contact?: SortOrder
    ew?: SortOrder
    address?: SortOrder
    added_by?: SortOrder
    _count?: organizationCountOrderByAggregateInput
    _avg?: organizationAvgOrderByAggregateInput
    _max?: organizationMaxOrderByAggregateInput
    _min?: organizationMinOrderByAggregateInput
    _sum?: organizationSumOrderByAggregateInput
  }

  export type organizationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<organizationScalarWhereWithAggregatesInput>
    OR?: Enumerable<organizationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<organizationScalarWhereWithAggregatesInput>
    org_id?: IntWithAggregatesFilter | number
    orgName?: StringWithAggregatesFilter | string
    contact?: StringWithAggregatesFilter | string
    ew?: StringWithAggregatesFilter | string
    address?: StringWithAggregatesFilter | string
    added_by?: StringWithAggregatesFilter | string
  }

  export type patientAdditionWhereInput = {
    AND?: Enumerable<patientAdditionWhereInput>
    OR?: Enumerable<patientAdditionWhereInput>
    NOT?: Enumerable<patientAdditionWhereInput>
    paitient_id?: IntFilter | number
    patient_name?: StringFilter | string
    hospital?: StringFilter | string
    location?: StringFilter | string
    description?: StringFilter | string
    time?: DateTimeFilter | Date | string
    added_by?: StringFilter | string
  }

  export type patientAdditionOrderByWithRelationInput = {
    paitient_id?: SortOrder
    patient_name?: SortOrder
    hospital?: SortOrder
    location?: SortOrder
    description?: SortOrder
    time?: SortOrder
    added_by?: SortOrder
  }

  export type patientAdditionWhereUniqueInput = {
    paitient_id?: number
  }

  export type patientAdditionOrderByWithAggregationInput = {
    paitient_id?: SortOrder
    patient_name?: SortOrder
    hospital?: SortOrder
    location?: SortOrder
    description?: SortOrder
    time?: SortOrder
    added_by?: SortOrder
    _count?: patientAdditionCountOrderByAggregateInput
    _avg?: patientAdditionAvgOrderByAggregateInput
    _max?: patientAdditionMaxOrderByAggregateInput
    _min?: patientAdditionMinOrderByAggregateInput
    _sum?: patientAdditionSumOrderByAggregateInput
  }

  export type patientAdditionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<patientAdditionScalarWhereWithAggregatesInput>
    OR?: Enumerable<patientAdditionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<patientAdditionScalarWhereWithAggregatesInput>
    paitient_id?: IntWithAggregatesFilter | number
    patient_name?: StringWithAggregatesFilter | string
    hospital?: StringWithAggregatesFilter | string
    location?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    time?: DateTimeWithAggregatesFilter | Date | string
    added_by?: StringWithAggregatesFilter | string
  }

  export type donationWhereInput = {
    AND?: Enumerable<donationWhereInput>
    OR?: Enumerable<donationWhereInput>
    NOT?: Enumerable<donationWhereInput>
    donationId?: IntFilter | number
    type?: StringFilter | string
    amount?: StringFilter | string
    status?: BoolFilter | boolean
    date?: DateTimeFilter | Date | string
    expiration?: StringFilter | string
    added_by?: StringFilter | string
  }

  export type donationOrderByWithRelationInput = {
    donationId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    date?: SortOrder
    expiration?: SortOrder
    added_by?: SortOrder
  }

  export type donationWhereUniqueInput = {
    donationId?: number
  }

  export type donationOrderByWithAggregationInput = {
    donationId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    date?: SortOrder
    expiration?: SortOrder
    added_by?: SortOrder
    _count?: donationCountOrderByAggregateInput
    _avg?: donationAvgOrderByAggregateInput
    _max?: donationMaxOrderByAggregateInput
    _min?: donationMinOrderByAggregateInput
    _sum?: donationSumOrderByAggregateInput
  }

  export type donationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<donationScalarWhereWithAggregatesInput>
    OR?: Enumerable<donationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<donationScalarWhereWithAggregatesInput>
    donationId?: IntWithAggregatesFilter | number
    type?: StringWithAggregatesFilter | string
    amount?: StringWithAggregatesFilter | string
    status?: BoolWithAggregatesFilter | boolean
    date?: DateTimeWithAggregatesFilter | Date | string
    expiration?: StringWithAggregatesFilter | string
    added_by?: StringWithAggregatesFilter | string
  }

  export type donationOrgWhereInput = {
    AND?: Enumerable<donationOrgWhereInput>
    OR?: Enumerable<donationOrgWhereInput>
    NOT?: Enumerable<donationOrgWhereInput>
    donationId?: IntFilter | number
    type?: StringFilter | string
    amount?: FloatFilter | number
    status?: BoolFilter | boolean
    orgId?: IntFilter | number
    date?: DateTimeFilter | Date | string
    donateBy?: StringFilter | string
  }

  export type donationOrgOrderByWithRelationInput = {
    donationId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    orgId?: SortOrder
    date?: SortOrder
    donateBy?: SortOrder
  }

  export type donationOrgWhereUniqueInput = {
    donationId?: number
  }

  export type donationOrgOrderByWithAggregationInput = {
    donationId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    orgId?: SortOrder
    date?: SortOrder
    donateBy?: SortOrder
    _count?: donationOrgCountOrderByAggregateInput
    _avg?: donationOrgAvgOrderByAggregateInput
    _max?: donationOrgMaxOrderByAggregateInput
    _min?: donationOrgMinOrderByAggregateInput
    _sum?: donationOrgSumOrderByAggregateInput
  }

  export type donationOrgScalarWhereWithAggregatesInput = {
    AND?: Enumerable<donationOrgScalarWhereWithAggregatesInput>
    OR?: Enumerable<donationOrgScalarWhereWithAggregatesInput>
    NOT?: Enumerable<donationOrgScalarWhereWithAggregatesInput>
    donationId?: IntWithAggregatesFilter | number
    type?: StringWithAggregatesFilter | string
    amount?: FloatWithAggregatesFilter | number
    status?: BoolWithAggregatesFilter | boolean
    orgId?: IntWithAggregatesFilter | number
    date?: DateTimeWithAggregatesFilter | Date | string
    donateBy?: StringWithAggregatesFilter | string
  }

  export type adminWhereInput = {
    AND?: Enumerable<adminWhereInput>
    OR?: Enumerable<adminWhereInput>
    NOT?: Enumerable<adminWhereInput>
    id?: IntFilter | number
    userName?: StringFilter | string
    name?: StringFilter | string
    role?: StringFilter | string
    password?: StringFilter | string
  }

  export type adminOrderByWithRelationInput = {
    id?: SortOrder
    userName?: SortOrder
    name?: SortOrder
    role?: SortOrder
    password?: SortOrder
  }

  export type adminWhereUniqueInput = {
    id?: number
    userName?: string
  }

  export type adminOrderByWithAggregationInput = {
    id?: SortOrder
    userName?: SortOrder
    name?: SortOrder
    role?: SortOrder
    password?: SortOrder
    _count?: adminCountOrderByAggregateInput
    _avg?: adminAvgOrderByAggregateInput
    _max?: adminMaxOrderByAggregateInput
    _min?: adminMinOrderByAggregateInput
    _sum?: adminSumOrderByAggregateInput
  }

  export type adminScalarWhereWithAggregatesInput = {
    AND?: Enumerable<adminScalarWhereWithAggregatesInput>
    OR?: Enumerable<adminScalarWhereWithAggregatesInput>
    NOT?: Enumerable<adminScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userName?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    role?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
  }

  export type UserCreateInput = {
    firstName: string
    lastName: string
    password: string
    email: string
    phoneNo: string
    address: string
    date?: Date | string
    isVolunteer: boolean
  }

  export type UserUncheckedCreateInput = {
    id?: number
    firstName: string
    lastName: string
    password: string
    email: string
    phoneNo: string
    address: string
    date?: Date | string
    isVolunteer: boolean
  }

  export type UserUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNo?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isVolunteer?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNo?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isVolunteer?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserCreateManyInput = {
    id?: number
    firstName: string
    lastName: string
    password: string
    email: string
    phoneNo: string
    address: string
    date?: Date | string
    isVolunteer: boolean
  }

  export type UserUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNo?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isVolunteer?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNo?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isVolunteer?: BoolFieldUpdateOperationsInput | boolean
  }

  export type organizationCreateInput = {
    orgName: string
    contact: string
    ew: string
    address: string
    added_by: string
  }

  export type organizationUncheckedCreateInput = {
    org_id?: number
    orgName: string
    contact: string
    ew: string
    address: string
    added_by: string
  }

  export type organizationUpdateInput = {
    orgName?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    ew?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    added_by?: StringFieldUpdateOperationsInput | string
  }

  export type organizationUncheckedUpdateInput = {
    org_id?: IntFieldUpdateOperationsInput | number
    orgName?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    ew?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    added_by?: StringFieldUpdateOperationsInput | string
  }

  export type organizationCreateManyInput = {
    org_id?: number
    orgName: string
    contact: string
    ew: string
    address: string
    added_by: string
  }

  export type organizationUpdateManyMutationInput = {
    orgName?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    ew?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    added_by?: StringFieldUpdateOperationsInput | string
  }

  export type organizationUncheckedUpdateManyInput = {
    org_id?: IntFieldUpdateOperationsInput | number
    orgName?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    ew?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    added_by?: StringFieldUpdateOperationsInput | string
  }

  export type patientAdditionCreateInput = {
    patient_name: string
    hospital: string
    location: string
    description: string
    time?: Date | string
    added_by: string
  }

  export type patientAdditionUncheckedCreateInput = {
    paitient_id?: number
    patient_name: string
    hospital: string
    location: string
    description: string
    time?: Date | string
    added_by: string
  }

  export type patientAdditionUpdateInput = {
    patient_name?: StringFieldUpdateOperationsInput | string
    hospital?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    added_by?: StringFieldUpdateOperationsInput | string
  }

  export type patientAdditionUncheckedUpdateInput = {
    paitient_id?: IntFieldUpdateOperationsInput | number
    patient_name?: StringFieldUpdateOperationsInput | string
    hospital?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    added_by?: StringFieldUpdateOperationsInput | string
  }

  export type patientAdditionCreateManyInput = {
    paitient_id?: number
    patient_name: string
    hospital: string
    location: string
    description: string
    time?: Date | string
    added_by: string
  }

  export type patientAdditionUpdateManyMutationInput = {
    patient_name?: StringFieldUpdateOperationsInput | string
    hospital?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    added_by?: StringFieldUpdateOperationsInput | string
  }

  export type patientAdditionUncheckedUpdateManyInput = {
    paitient_id?: IntFieldUpdateOperationsInput | number
    patient_name?: StringFieldUpdateOperationsInput | string
    hospital?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    added_by?: StringFieldUpdateOperationsInput | string
  }

  export type donationCreateInput = {
    type: string
    amount: string
    status: boolean
    date?: Date | string
    expiration: string
    added_by: string
  }

  export type donationUncheckedCreateInput = {
    donationId?: number
    type: string
    amount: string
    status: boolean
    date?: Date | string
    expiration: string
    added_by: string
  }

  export type donationUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    amount?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    expiration?: StringFieldUpdateOperationsInput | string
    added_by?: StringFieldUpdateOperationsInput | string
  }

  export type donationUncheckedUpdateInput = {
    donationId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    amount?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    expiration?: StringFieldUpdateOperationsInput | string
    added_by?: StringFieldUpdateOperationsInput | string
  }

  export type donationCreateManyInput = {
    donationId?: number
    type: string
    amount: string
    status: boolean
    date?: Date | string
    expiration: string
    added_by: string
  }

  export type donationUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
    amount?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    expiration?: StringFieldUpdateOperationsInput | string
    added_by?: StringFieldUpdateOperationsInput | string
  }

  export type donationUncheckedUpdateManyInput = {
    donationId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    amount?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    expiration?: StringFieldUpdateOperationsInput | string
    added_by?: StringFieldUpdateOperationsInput | string
  }

  export type donationOrgCreateInput = {
    type: string
    amount: number
    status: boolean
    orgId: number
    date?: Date | string
    donateBy: string
  }

  export type donationOrgUncheckedCreateInput = {
    donationId?: number
    type: string
    amount: number
    status: boolean
    orgId: number
    date?: Date | string
    donateBy: string
  }

  export type donationOrgUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: BoolFieldUpdateOperationsInput | boolean
    orgId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    donateBy?: StringFieldUpdateOperationsInput | string
  }

  export type donationOrgUncheckedUpdateInput = {
    donationId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: BoolFieldUpdateOperationsInput | boolean
    orgId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    donateBy?: StringFieldUpdateOperationsInput | string
  }

  export type donationOrgCreateManyInput = {
    donationId?: number
    type: string
    amount: number
    status: boolean
    orgId: number
    date?: Date | string
    donateBy: string
  }

  export type donationOrgUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: BoolFieldUpdateOperationsInput | boolean
    orgId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    donateBy?: StringFieldUpdateOperationsInput | string
  }

  export type donationOrgUncheckedUpdateManyInput = {
    donationId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: BoolFieldUpdateOperationsInput | boolean
    orgId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    donateBy?: StringFieldUpdateOperationsInput | string
  }

  export type adminCreateInput = {
    userName: string
    name: string
    role: string
    password: string
  }

  export type adminUncheckedCreateInput = {
    id?: number
    userName: string
    name: string
    role: string
    password: string
  }

  export type adminUpdateInput = {
    userName?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type adminUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type adminCreateManyInput = {
    id?: number
    userName: string
    name: string
    role: string
    password: string
  }

  export type adminUpdateManyMutationInput = {
    userName?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type adminUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    password?: SortOrder
    email?: SortOrder
    phoneNo?: SortOrder
    address?: SortOrder
    date?: SortOrder
    isVolunteer?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    password?: SortOrder
    email?: SortOrder
    phoneNo?: SortOrder
    address?: SortOrder
    date?: SortOrder
    isVolunteer?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    password?: SortOrder
    email?: SortOrder
    phoneNo?: SortOrder
    address?: SortOrder
    date?: SortOrder
    isVolunteer?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type organizationCountOrderByAggregateInput = {
    org_id?: SortOrder
    orgName?: SortOrder
    contact?: SortOrder
    ew?: SortOrder
    address?: SortOrder
    added_by?: SortOrder
  }

  export type organizationAvgOrderByAggregateInput = {
    org_id?: SortOrder
  }

  export type organizationMaxOrderByAggregateInput = {
    org_id?: SortOrder
    orgName?: SortOrder
    contact?: SortOrder
    ew?: SortOrder
    address?: SortOrder
    added_by?: SortOrder
  }

  export type organizationMinOrderByAggregateInput = {
    org_id?: SortOrder
    orgName?: SortOrder
    contact?: SortOrder
    ew?: SortOrder
    address?: SortOrder
    added_by?: SortOrder
  }

  export type organizationSumOrderByAggregateInput = {
    org_id?: SortOrder
  }

  export type patientAdditionCountOrderByAggregateInput = {
    paitient_id?: SortOrder
    patient_name?: SortOrder
    hospital?: SortOrder
    location?: SortOrder
    description?: SortOrder
    time?: SortOrder
    added_by?: SortOrder
  }

  export type patientAdditionAvgOrderByAggregateInput = {
    paitient_id?: SortOrder
  }

  export type patientAdditionMaxOrderByAggregateInput = {
    paitient_id?: SortOrder
    patient_name?: SortOrder
    hospital?: SortOrder
    location?: SortOrder
    description?: SortOrder
    time?: SortOrder
    added_by?: SortOrder
  }

  export type patientAdditionMinOrderByAggregateInput = {
    paitient_id?: SortOrder
    patient_name?: SortOrder
    hospital?: SortOrder
    location?: SortOrder
    description?: SortOrder
    time?: SortOrder
    added_by?: SortOrder
  }

  export type patientAdditionSumOrderByAggregateInput = {
    paitient_id?: SortOrder
  }

  export type donationCountOrderByAggregateInput = {
    donationId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    date?: SortOrder
    expiration?: SortOrder
    added_by?: SortOrder
  }

  export type donationAvgOrderByAggregateInput = {
    donationId?: SortOrder
  }

  export type donationMaxOrderByAggregateInput = {
    donationId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    date?: SortOrder
    expiration?: SortOrder
    added_by?: SortOrder
  }

  export type donationMinOrderByAggregateInput = {
    donationId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    date?: SortOrder
    expiration?: SortOrder
    added_by?: SortOrder
  }

  export type donationSumOrderByAggregateInput = {
    donationId?: SortOrder
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type donationOrgCountOrderByAggregateInput = {
    donationId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    orgId?: SortOrder
    date?: SortOrder
    donateBy?: SortOrder
  }

  export type donationOrgAvgOrderByAggregateInput = {
    donationId?: SortOrder
    amount?: SortOrder
    orgId?: SortOrder
  }

  export type donationOrgMaxOrderByAggregateInput = {
    donationId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    orgId?: SortOrder
    date?: SortOrder
    donateBy?: SortOrder
  }

  export type donationOrgMinOrderByAggregateInput = {
    donationId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    orgId?: SortOrder
    date?: SortOrder
    donateBy?: SortOrder
  }

  export type donationOrgSumOrderByAggregateInput = {
    donationId?: SortOrder
    amount?: SortOrder
    orgId?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type adminCountOrderByAggregateInput = {
    id?: SortOrder
    userName?: SortOrder
    name?: SortOrder
    role?: SortOrder
    password?: SortOrder
  }

  export type adminAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type adminMaxOrderByAggregateInput = {
    id?: SortOrder
    userName?: SortOrder
    name?: SortOrder
    role?: SortOrder
    password?: SortOrder
  }

  export type adminMinOrderByAggregateInput = {
    id?: SortOrder
    userName?: SortOrder
    name?: SortOrder
    role?: SortOrder
    password?: SortOrder
  }

  export type adminSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}